# Pure
# by Sindre Sorhus
# https://github.com/sindresorhus/pure
# MIT License
# modified by akerl

# Change this to your own username
DEFAULT_USERNAMES=(akerl laker)

# Threshold (sec) for showing cmd exec time
CMD_MAX_EXEC_TIME=5


# For my own and others sanity
# git:
# %b => current branch
# %a => current action (rebase/merge)
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git # You can add hg too if needed: `git hg`
zstyle ':vcs_info:git*' formats ' %b'
zstyle ':vcs_info:git*' actionformats ' %b|%a'

# enable prompt substitution
setopt PROMPT_SUBST

# Only show username if not default
[[ ${DEFAULT_USERNAMES[(r)$USER]} == "$USER" ]] || local username='%F{red}%n%f@'

# Fastest possible way to check if repo is dirty
git_dirty() {
    # check if we're in a git repo
    command git rev-parse --is-inside-work-tree &>/dev/null || return
    # check if it's dirty
    command git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo '*'
}

git_info() {
    if [[ -z "$vcs_info_msg_0_" ]] ; then
        return
    elif [[ "$vcs_info_msg_0_" == " master" ]] ; then
        echo -n "%F{202} ()"
    else
        echo -n "%F{202}${vcs_info_msg_0_}"
    fi
    echo "%F{226}$(git_dirty)"
}

get_host() {
    if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" || -n "$(tty | grep pts)" ]]; then
        echo "%F{yellow}%M%f" #SSH
    else
        echo "%F{239}%M%f" # no SSH
    fi
}

prompt_char() {
    if [ $UID -eq 0 ] ; then
        echo '❯❯'
    else
        echo '❯'
    fi
}

# Displays the exec time of the last command if set threshold was exceeded
cmd_exec_time() {
    local stop=`date +%s`
    local start=${cmd_timestamp:-$stop}
    let local elapsed=$stop-$start
    [ $elapsed -gt $CMD_MAX_EXEC_TIME ] && echo ${elapsed}s
}

preexec() {
    cmd_timestamp=`date +%s`
}

precmd() {
    vcs_info
    # Add `%*` to display the time
    print -P '%F{blue}%~`git_info` ${username}`get_host` %f %F{yellow}`cmd_exec_time`%f'
    # Reset value since `preexec` isn't always triggered
    unset cmd_timestamp
}

# Prompt turns red if the previous command didn't exit with 0
PROMPT="%(?.%F{white}.%F{red})`prompt_char`%f "
# Can be disabled:
# PROMPT='%F{magenta}❯%f '

